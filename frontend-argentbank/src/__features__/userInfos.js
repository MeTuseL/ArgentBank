import { createSlice } from '@reduxjs/toolkit'

/**
 * Initial state for the user information slice.
 *
 * @category Redux Slice
 * @namespace userInfosSlice
 * @property {Object} user - Object containing user information.
 * @property {boolean} user.connected - Indicates if the user is connected.
 * @property {string|null} user.email - User's email address.
 * @property {string|null} user.firstName - User's first name.
 * @property {string|null} user.lastName - User's last name.
 * @property {string|null} user.createdAt - Timestamp of user creation.
 * @property {string|null} user.updatedAt - Timestamp of last user update.
 * @property {string|null} user.id - User's ID.
 * @property {Object} tokenUser - Object containing user token.
 * @property {string|null} tokenUser.token - User's token.
 * @property {Object} remember - Object for remembering user state.
 * @property {boolean} remember.checked - Indicates if user state is remembered.
 */
const initialState = {
    user: {
        connected: false,
        email: null,
        firstName: null,
        lastName: null,
        createdAt: null,
        updatedAt: null,
        id: null,
    },
    tokenUser: {
        token: null,
    },
    remember: {
        checked: false,
    },
}
/**
 * Redux slice for user information and authentication.
 *
 * @category Redux Slice
 * @namespace userInfosSlice
 */
export const userInfosSlice = createSlice({
    name: 'userInfos',
    initialState,

    reducers: {
        /**
         * Updates the user token.
         *
         * @function
         * @memberOf userInfosSlice
         * @param {Object} state - Current state.
         * @param {Object} action - Redux action object.
         */
        tokenUser: (state, action) => {
            state.tokenUser = {
                ...state.tokenUser,
                token: action.payload.token,
            }
        },
        /**
         * Updates user information.
         *
         * @function
         * @memberOf userInfosSlice
         * @param {Object} state - Current state.
         * @param {Object} action - Redux action object.
         */
        loginUserInfos: (state, action) => {
            state.user = {
                ...state.user,
                connected: true,
                email: action.payload.email,
                firstName: action.payload.firstName,
                lastName: action.payload.lastName,
                createdAt: action.payload.createdAt,
                updatedAt: action.payload.updatedAt,
                id: action.payload.id,
            }
        },
        /**
         * Resets user information.
         *
         * @function
         * @memberOf userInfosSlice
         * @param {Object} state - Current state.
         */
        logOutUser: (state) => {
            state.user = {
                ...state.user,
                connected: false,
                email: null,
                firstName: null,
                lastName: null,
                createdAt: null,
                updatedAt: null,
                id: null,
            }
            state.tokenUser = { ...state.tokenUser, token: null }
        },
        /**
         * Edits user information.
         *
         * @function
         * @memberOf userInfosSlice
         * @param {Object} state - Current state.
         * @param {Object} action - Redux action object.
         */
        editUserInfos: (state, action) => {
            state.user = {
                ...state.user,
                firstName: action.payload.firstName,
                lastName: action.payload.lastName,
                updatedAt: action.payload.updatedAt,
            }
        },
        /**
         * Updates the state for remembering user authentication.
         *
         * @function
         * @param {Object} state - Current state.
         * @param {Object} action - Redux action object.
         */
        rememberUser: (state, action) => {
            state.remember = {
                ...state.remember,
                checked: action.payload,
            }
        },
    },
})

/**
 * Actions generated by userInfosSlice.
 *
 * @category Redux Slice
 * @namespace userInfosSlice
 * @type {Object}
 */
export const {
    tokenUser,
    loginUserInfos,
    logOutUser,
    editUserInfos,
    rememberUser,
} = userInfosSlice.actions

/**
 * Selector function to get user information from state.
 *
 * @category Redux Selector
 * @param {Object} state - Redux state object.
 * @returns {Object} User information.
 */
export const selectUserInfos = (state) => state.userInfos.user
/**
 * Selector function to get user token from state.
 *
 * @category Redux Selector
 * @param {Object} state - Redux state object.
 * @returns {Object} User token.
 */
export const selectTokenUser = (state) => state.userInfos.tokenUser
/**
 * Selector function to get remember user state from state.
 *
 * @category Redux Selector
 * @param {Object} state - Redux state object.
 * @returns {Object} Remember user state.
 */
export const selectRememberUser = (state) => state.userInfos.remember
/**
 * Reducer function for userInfosSlice.
 *
 * @category Redux Reducer
 * @namespace userInfosSlice
 * @type {Function}
 */
export default userInfosSlice.reducer
